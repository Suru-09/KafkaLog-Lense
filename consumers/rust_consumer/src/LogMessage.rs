// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `LogMessage.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct LogMessage {
    // message fields
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub log_level: LogLevel,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogMessage {
    fn default() -> &'a LogMessage {
        <LogMessage as ::protobuf::Message>::default_instance()
    }
}

impl LogMessage {
    pub fn new() -> LogMessage {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp timestamp = 1;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .protobuf.LogLevel log_level = 2;


    pub fn get_log_level(&self) -> LogLevel {
        self.log_level
    }
    pub fn clear_log_level(&mut self) {
        self.log_level = LogLevel::DEBUG;
    }

    // Param is passed by value, moved
    pub fn set_log_level(&mut self, v: LogLevel) {
        self.log_level = v;
    }

    // string message = 3;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LogMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.log_level, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.log_level != LogLevel::DEBUG {
            my_size += ::protobuf::rt::enum_size(2, self.log_level);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.log_level != LogLevel::DEBUG {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.log_level))?;
        }
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogMessage {
        LogMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &LogMessage| { &m.timestamp },
                |m: &mut LogMessage| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LogLevel>>(
                "log_level",
                |m: &LogMessage| { &m.log_level },
                |m: &mut LogMessage| { &mut m.log_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &LogMessage| { &m.message },
                |m: &mut LogMessage| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogMessage>(
                "LogMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogMessage {
        static instance: ::protobuf::rt::LazyV2<LogMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogMessage::new)
    }
}

impl ::protobuf::Clear for LogMessage {
    fn clear(&mut self) {
        self.timestamp.clear();
        self.log_level = LogLevel::DEBUG;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LogLevel {
    DEBUG = 0,
    INFO = 1,
    WARNING = 2,
    ERROR = 3,
    FATAL = 4,
}

impl ::protobuf::ProtobufEnum for LogLevel {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LogLevel> {
        match value {
            0 => ::std::option::Option::Some(LogLevel::DEBUG),
            1 => ::std::option::Option::Some(LogLevel::INFO),
            2 => ::std::option::Option::Some(LogLevel::WARNING),
            3 => ::std::option::Option::Some(LogLevel::ERROR),
            4 => ::std::option::Option::Some(LogLevel::FATAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LogLevel] = &[
            LogLevel::DEBUG,
            LogLevel::INFO,
            LogLevel::WARNING,
            LogLevel::ERROR,
            LogLevel::FATAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LogLevel>("LogLevel", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LogLevel {
}

impl ::std::default::Default for LogLevel {
    fn default() -> Self {
        LogLevel::DEBUG
    }
}

impl ::protobuf::reflect::ProtobufValue for LogLevel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10LogMessage.proto\x12\x08protobuf\x1a\x1fgoogle/protobuf/timestamp.\
    proto\"\x91\x01\n\nLogMessage\x128\n\ttimestamp\x18\x01\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\ttimestamp\x12/\n\tlog_level\x18\x02\x20\
    \x01(\x0e2\x12.protobuf.LogLevelR\x08logLevel\x12\x18\n\x07message\x18\
    \x03\x20\x01(\tR\x07message*B\n\x08LogLevel\x12\t\n\x05DEBUG\x10\0\x12\
    \x08\n\x04INFO\x10\x01\x12\x0b\n\x07WARNING\x10\x02\x12\t\n\x05ERROR\x10\
    \x03\x12\t\n\x05FATAL\x10\x04J\xc9\x03\n\x06\x12\x04\0\0\x11\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x11\n\t\n\x02\x03\
    \0\x12\x03\x03\0)\n\n\n\x02\x05\0\x12\x04\x05\0\x0b\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x05\x05\r\n\x0b\n\x04\x05\0\x02\0\x12\x03\x06\x02\x0c\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x03\x06\x02\x07\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x06\n\x0b\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x07\x02\x0b\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x07\x02\x06\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x07\t\n\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x08\x02\x0e\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\x08\x02\t\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03\x08\x0c\r\n\x0b\n\x04\x05\0\x02\x03\x12\x03\t\x02\x0c\n\x0c\n\
    \x05\x05\0\x02\x03\x01\x12\x03\t\x02\x07\n\x0c\n\x05\x05\0\x02\x03\x02\
    \x12\x03\t\n\x0b\n\x0b\n\x04\x05\0\x02\x04\x12\x03\n\x02\x0c\n\x0c\n\x05\
    \x05\0\x02\x04\x01\x12\x03\n\x02\x07\n\x0c\n\x05\x05\0\x02\x04\x02\x12\
    \x03\n\n\x0b\n\n\n\x02\x04\0\x12\x04\r\0\x11\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\r\x08\x12\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0e\x02*\n\x0c\n\x05\x04\
    \0\x02\0\x06\x12\x03\x0e\x02\x1b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\
    \x1c%\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e()\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x0f\x02\x19\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0f\x02\n\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\x0b\x14\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x0f\x17\x18\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x10\x02\
    \x15\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x10\t\x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x10\
    \x13\x14b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
